// Code generated by protoc-gen-go. DO NOT EDIT.
// source: talk_cloud_app.proto

package talk_cloud

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 头部信息
type Head struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	SubVersion           string   `protobuf:"bytes,2,opt,name=sub_version,json=subVersion,proto3" json:"sub_version,omitempty"`
	Timestamp            int32    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Head) Reset()         { *m = Head{} }
func (m *Head) String() string { return proto.CompactTextString(m) }
func (*Head) ProtoMessage()    {}
func (*Head) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{0}
}

func (m *Head) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Head.Unmarshal(m, b)
}
func (m *Head) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Head.Marshal(b, m, deterministic)
}
func (m *Head) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Head.Merge(m, src)
}
func (m *Head) XXX_Size() int {
	return xxx_messageInfo_Head.Size(m)
}
func (m *Head) XXX_DiscardUnknown() {
	xxx_messageInfo_Head.DiscardUnknown(m)
}

var xxx_messageInfo_Head proto.InternalMessageInfo

func (m *Head) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Head) GetSubVersion() string {
	if m != nil {
		return m.SubVersion
	}
	return ""
}

func (m *Head) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// App注册用户请求
type AppRegReq struct {
	Head                 *Head    `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppRegReq) Reset()         { *m = AppRegReq{} }
func (m *AppRegReq) String() string { return proto.CompactTextString(m) }
func (*AppRegReq) ProtoMessage()    {}
func (*AppRegReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{1}
}

func (m *AppRegReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppRegReq.Unmarshal(m, b)
}
func (m *AppRegReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppRegReq.Marshal(b, m, deterministic)
}
func (m *AppRegReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppRegReq.Merge(m, src)
}
func (m *AppRegReq) XXX_Size() int {
	return xxx_messageInfo_AppRegReq.Size(m)
}
func (m *AppRegReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AppRegReq.DiscardUnknown(m)
}

var xxx_messageInfo_AppRegReq proto.InternalMessageInfo

func (m *AppRegReq) GetHead() *Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *AppRegReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AppRegReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// App注册用户响应
type AppRegRsp struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserName             string   `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Res                  *Result  `protobuf:"bytes,3,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppRegRsp) Reset()         { *m = AppRegRsp{} }
func (m *AppRegRsp) String() string { return proto.CompactTextString(m) }
func (*AppRegRsp) ProtoMessage()    {}
func (*AppRegRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{2}
}

func (m *AppRegRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppRegRsp.Unmarshal(m, b)
}
func (m *AppRegRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppRegRsp.Marshal(b, m, deterministic)
}
func (m *AppRegRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppRegRsp.Merge(m, src)
}
func (m *AppRegRsp) XXX_Size() int {
	return xxx_messageInfo_AppRegRsp.Size(m)
}
func (m *AppRegRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AppRegRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AppRegRsp proto.InternalMessageInfo

func (m *AppRegRsp) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppRegRsp) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *AppRegRsp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

// Device注册请求
type DeviceRegReq struct {
	AccountId            int32    `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	DeviceList           string   `protobuf:"bytes,2,opt,name=device_list,json=deviceList,proto3" json:"device_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceRegReq) Reset()         { *m = DeviceRegReq{} }
func (m *DeviceRegReq) String() string { return proto.CompactTextString(m) }
func (*DeviceRegReq) ProtoMessage()    {}
func (*DeviceRegReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{3}
}

func (m *DeviceRegReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceRegReq.Unmarshal(m, b)
}
func (m *DeviceRegReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceRegReq.Marshal(b, m, deterministic)
}
func (m *DeviceRegReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRegReq.Merge(m, src)
}
func (m *DeviceRegReq) XXX_Size() int {
	return xxx_messageInfo_DeviceRegReq.Size(m)
}
func (m *DeviceRegReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRegReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRegReq proto.InternalMessageInfo

func (m *DeviceRegReq) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *DeviceRegReq) GetDeviceList() string {
	if m != nil {
		return m.DeviceList
	}
	return ""
}

// Device注册响应
type DeviceRegRsp struct {
	Res                  *Result  `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceRegRsp) Reset()         { *m = DeviceRegRsp{} }
func (m *DeviceRegRsp) String() string { return proto.CompactTextString(m) }
func (*DeviceRegRsp) ProtoMessage()    {}
func (*DeviceRegRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{4}
}

func (m *DeviceRegRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceRegRsp.Unmarshal(m, b)
}
func (m *DeviceRegRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceRegRsp.Marshal(b, m, deterministic)
}
func (m *DeviceRegRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRegRsp.Merge(m, src)
}
func (m *DeviceRegRsp) XXX_Size() int {
	return xxx_messageInfo_DeviceRegRsp.Size(m)
}
func (m *DeviceRegRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRegRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRegRsp proto.InternalMessageInfo

func (m *DeviceRegRsp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

// 登录请求
type LoginReq struct {
	Head                 *Head    `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Passwd               string   `protobuf:"bytes,3,opt,name=passwd,proto3" json:"passwd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginReq) Reset()         { *m = LoginReq{} }
func (m *LoginReq) String() string { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()    {}
func (*LoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{5}
}

func (m *LoginReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginReq.Unmarshal(m, b)
}
func (m *LoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginReq.Marshal(b, m, deterministic)
}
func (m *LoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReq.Merge(m, src)
}
func (m *LoginReq) XXX_Size() int {
	return xxx_messageInfo_LoginReq.Size(m)
}
func (m *LoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReq proto.InternalMessageInfo

func (m *LoginReq) GetHead() *Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *LoginReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LoginReq) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

// 登录返回的数据（群组列表，好友列表等）
type LoginRsp struct {
	UserInfo             *Member         `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	FriendList           []*FriendRecord `protobuf:"bytes,2,rep,name=friend_list,json=friendList,proto3" json:"friend_list,omitempty"`
	GroupList            []*GroupInfo    `protobuf:"bytes,3,rep,name=group_list,json=groupList,proto3" json:"group_list,omitempty"`
	Res                  *Result         `protobuf:"bytes,4,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LoginRsp) Reset()         { *m = LoginRsp{} }
func (m *LoginRsp) String() string { return proto.CompactTextString(m) }
func (*LoginRsp) ProtoMessage()    {}
func (*LoginRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{6}
}

func (m *LoginRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginRsp.Unmarshal(m, b)
}
func (m *LoginRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginRsp.Marshal(b, m, deterministic)
}
func (m *LoginRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRsp.Merge(m, src)
}
func (m *LoginRsp) XXX_Size() int {
	return xxx_messageInfo_LoginRsp.Size(m)
}
func (m *LoginRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRsp proto.InternalMessageInfo

func (m *LoginRsp) GetUserInfo() *Member {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *LoginRsp) GetFriendList() []*FriendRecord {
	if m != nil {
		return m.FriendList
	}
	return nil
}

func (m *LoginRsp) GetGroupList() []*GroupInfo {
	if m != nil {
		return m.GroupList
	}
	return nil
}

func (m *LoginRsp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

// 获取Im数据或者发送im数据的内容消息定义
type ImMsgReqData struct {
	// 用户uid 发送者
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 1 发送个单独某个人，2 是发给群组里面
	ReceiverType int32 `protobuf:"varint,2,opt,name=ReceiverType,proto3" json:"ReceiverType,omitempty"`
	// 接受者的id，群组就是群组id
	ReceiverId int32 `protobuf:"varint,3,opt,name=ReceiverId,proto3" json:"ReceiverId,omitempty"`
	// 资源文件路径，app端发送文字信息，就把文字内容放在这里
	ResourcePath string `protobuf:"bytes,4,opt,name=ResourcePath,proto3" json:"ResourcePath,omitempty"`
	// 消息类型 	1 普通文本   2 图片  3  音频文件  4 视频文件  5 PDF文件
	MsgType              int32    `protobuf:"varint,5,opt,name=MsgType,proto3" json:"MsgType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImMsgReqData) Reset()         { *m = ImMsgReqData{} }
func (m *ImMsgReqData) String() string { return proto.CompactTextString(m) }
func (*ImMsgReqData) ProtoMessage()    {}
func (*ImMsgReqData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{7}
}

func (m *ImMsgReqData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImMsgReqData.Unmarshal(m, b)
}
func (m *ImMsgReqData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImMsgReqData.Marshal(b, m, deterministic)
}
func (m *ImMsgReqData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImMsgReqData.Merge(m, src)
}
func (m *ImMsgReqData) XXX_Size() int {
	return xxx_messageInfo_ImMsgReqData.Size(m)
}
func (m *ImMsgReqData) XXX_DiscardUnknown() {
	xxx_messageInfo_ImMsgReqData.DiscardUnknown(m)
}

var xxx_messageInfo_ImMsgReqData proto.InternalMessageInfo

func (m *ImMsgReqData) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ImMsgReqData) GetReceiverType() int32 {
	if m != nil {
		return m.ReceiverType
	}
	return 0
}

func (m *ImMsgReqData) GetReceiverId() int32 {
	if m != nil {
		return m.ReceiverId
	}
	return 0
}

func (m *ImMsgReqData) GetResourcePath() string {
	if m != nil {
		return m.ResourcePath
	}
	return ""
}

func (m *ImMsgReqData) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

// 上传文件之后返回给web api的相应
type ImMsgRespData struct {
	Result               *Result  `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImMsgRespData) Reset()         { *m = ImMsgRespData{} }
func (m *ImMsgRespData) String() string { return proto.CompactTextString(m) }
func (*ImMsgRespData) ProtoMessage()    {}
func (*ImMsgRespData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{8}
}

func (m *ImMsgRespData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImMsgRespData.Unmarshal(m, b)
}
func (m *ImMsgRespData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImMsgRespData.Marshal(b, m, deterministic)
}
func (m *ImMsgRespData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImMsgRespData.Merge(m, src)
}
func (m *ImMsgRespData) XXX_Size() int {
	return xxx_messageInfo_ImMsgRespData.Size(m)
}
func (m *ImMsgRespData) XXX_DiscardUnknown() {
	xxx_messageInfo_ImMsgRespData.DiscardUnknown(m)
}

var xxx_messageInfo_ImMsgRespData proto.InternalMessageInfo

func (m *ImMsgRespData) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

// 退出请求
type LogoutReq struct {
	Head                 *Head    `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogoutReq) Reset()         { *m = LogoutReq{} }
func (m *LogoutReq) String() string { return proto.CompactTextString(m) }
func (*LogoutReq) ProtoMessage()    {}
func (*LogoutReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{9}
}

func (m *LogoutReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogoutReq.Unmarshal(m, b)
}
func (m *LogoutReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogoutReq.Marshal(b, m, deterministic)
}
func (m *LogoutReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutReq.Merge(m, src)
}
func (m *LogoutReq) XXX_Size() int {
	return xxx_messageInfo_LogoutReq.Size(m)
}
func (m *LogoutReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutReq.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutReq proto.InternalMessageInfo

func (m *LogoutReq) GetHead() *Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *LogoutReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LogoutRsp struct {
	Res                  *Result  `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogoutRsp) Reset()         { *m = LogoutRsp{} }
func (m *LogoutRsp) String() string { return proto.CompactTextString(m) }
func (*LogoutRsp) ProtoMessage()    {}
func (*LogoutRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{10}
}

func (m *LogoutRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogoutRsp.Unmarshal(m, b)
}
func (m *LogoutRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogoutRsp.Marshal(b, m, deterministic)
}
func (m *LogoutRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutRsp.Merge(m, src)
}
func (m *LogoutRsp) XXX_Size() int {
	return xxx_messageInfo_LogoutRsp.Size(m)
}
func (m *LogoutRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutRsp proto.InternalMessageInfo

func (m *LogoutRsp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

// 设置群组锁定请求
type SetLockGroupIdReq struct {
	UId                  int32    `protobuf:"varint,1,opt,name=uId,proto3" json:"uId,omitempty"`
	GId                  int32    `protobuf:"varint,2,opt,name=gId,proto3" json:"gId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetLockGroupIdReq) Reset()         { *m = SetLockGroupIdReq{} }
func (m *SetLockGroupIdReq) String() string { return proto.CompactTextString(m) }
func (*SetLockGroupIdReq) ProtoMessage()    {}
func (*SetLockGroupIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{11}
}

func (m *SetLockGroupIdReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetLockGroupIdReq.Unmarshal(m, b)
}
func (m *SetLockGroupIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetLockGroupIdReq.Marshal(b, m, deterministic)
}
func (m *SetLockGroupIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetLockGroupIdReq.Merge(m, src)
}
func (m *SetLockGroupIdReq) XXX_Size() int {
	return xxx_messageInfo_SetLockGroupIdReq.Size(m)
}
func (m *SetLockGroupIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetLockGroupIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetLockGroupIdReq proto.InternalMessageInfo

func (m *SetLockGroupIdReq) GetUId() int32 {
	if m != nil {
		return m.UId
	}
	return 0
}

func (m *SetLockGroupIdReq) GetGId() int32 {
	if m != nil {
		return m.GId
	}
	return 0
}

// 设置群组锁定响应
type SetLockGroupIdResp struct {
	Res                  *Result  `protobuf:"bytes,1,opt,name=Res,proto3" json:"Res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetLockGroupIdResp) Reset()         { *m = SetLockGroupIdResp{} }
func (m *SetLockGroupIdResp) String() string { return proto.CompactTextString(m) }
func (*SetLockGroupIdResp) ProtoMessage()    {}
func (*SetLockGroupIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{12}
}

func (m *SetLockGroupIdResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetLockGroupIdResp.Unmarshal(m, b)
}
func (m *SetLockGroupIdResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetLockGroupIdResp.Marshal(b, m, deterministic)
}
func (m *SetLockGroupIdResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetLockGroupIdResp.Merge(m, src)
}
func (m *SetLockGroupIdResp) XXX_Size() int {
	return xxx_messageInfo_SetLockGroupIdResp.Size(m)
}
func (m *SetLockGroupIdResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetLockGroupIdResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetLockGroupIdResp proto.InternalMessageInfo

func (m *SetLockGroupIdResp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

type StreamRequest struct {
	// 用户id
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 1  初次登录返回的数据。比如用户列表，群组列表，该用户的个人信息
	// 2  用户离线时的IM数据
	// 3  APP和web通过httpClient上传的IM信息
	// 4  web端发过来的im消息 （ 调度员 ）和app的im数据类型
	// 5  用户登录后，每隔interval秒向stream发送一个消息，测试能不能连通，不能连通就认为该用户下线
	DataType int32 `protobuf:"varint,2,opt,name=dataType,proto3" json:"dataType,omitempty"`
	// 暂时用不到，因为login暂时保持原来的接口
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Passwd string `protobuf:"bytes,4,opt,name=passwd,proto3" json:"passwd,omitempty"`
	// 这个也暂时用不到，文件上传不走这里，文件上传是通过http client
	FileDataReq *UploadFileData `protobuf:"bytes,5,opt,name=FileDataReq,proto3" json:"FileDataReq,omitempty"`
	// app发送文字类型im数据的时候使用
	ImMsg                *ImMsgReqData `protobuf:"bytes,6,opt,name=imMsg,proto3" json:"imMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{13}
}

func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *StreamRequest) GetDataType() int32 {
	if m != nil {
		return m.DataType
	}
	return 0
}

func (m *StreamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StreamRequest) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *StreamRequest) GetFileDataReq() *UploadFileData {
	if m != nil {
		return m.FileDataReq
	}
	return nil
}

func (m *StreamRequest) GetImMsg() *ImMsgReqData {
	if m != nil {
		return m.ImMsg
	}
	return nil
}

type UploadFileData struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SendType             int32    `protobuf:"varint,2,opt,name=sendType,proto3" json:"sendType,omitempty"`
	ReceiverId           int32    `protobuf:"varint,3,opt,name=ReceiverId,proto3" json:"ReceiverId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadFileData) Reset()         { *m = UploadFileData{} }
func (m *UploadFileData) String() string { return proto.CompactTextString(m) }
func (*UploadFileData) ProtoMessage()    {}
func (*UploadFileData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{14}
}

func (m *UploadFileData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadFileData.Unmarshal(m, b)
}
func (m *UploadFileData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadFileData.Marshal(b, m, deterministic)
}
func (m *UploadFileData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileData.Merge(m, src)
}
func (m *UploadFileData) XXX_Size() int {
	return xxx_messageInfo_UploadFileData.Size(m)
}
func (m *UploadFileData) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileData.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileData proto.InternalMessageInfo

func (m *UploadFileData) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UploadFileData) GetSendType() int32 {
	if m != nil {
		return m.SendType
	}
	return 0
}

func (m *UploadFileData) GetReceiverId() int32 {
	if m != nil {
		return m.ReceiverId
	}
	return 0
}

type ImReceiver struct {
	Type                 int32      `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	GroupInfo            *GroupInfo `protobuf:"bytes,2,opt,name=groupInfo,proto3" json:"groupInfo,omitempty"`
	UserInfo             *Member    `protobuf:"bytes,3,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ImReceiver) Reset()         { *m = ImReceiver{} }
func (m *ImReceiver) String() string { return proto.CompactTextString(m) }
func (*ImReceiver) ProtoMessage()    {}
func (*ImReceiver) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{15}
}

func (m *ImReceiver) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImReceiver.Unmarshal(m, b)
}
func (m *ImReceiver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImReceiver.Marshal(b, m, deterministic)
}
func (m *ImReceiver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImReceiver.Merge(m, src)
}
func (m *ImReceiver) XXX_Size() int {
	return xxx_messageInfo_ImReceiver.Size(m)
}
func (m *ImReceiver) XXX_DiscardUnknown() {
	xxx_messageInfo_ImReceiver.DiscardUnknown(m)
}

var xxx_messageInfo_ImReceiver proto.InternalMessageInfo

func (m *ImReceiver) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ImReceiver) GetGroupInfo() *GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

func (m *ImReceiver) GetUserInfo() *Member {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type StreamResponse struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 1  初次登录返回的数据。比如用户列表，群组列表，该用户的个人信息
	// 2  用户离线时的IM数据
	// 3  APP和web通过httpClient上传的IM信息
	// 4  web端发过来的im消息 （ 调度员 ）
	// 5  用户登录后，每隔interval秒向stream发送一个消息，测试能不能连通，不能连通就认为该用户下线
	DataType int32 `protobuf:"varint,2,opt,name=DataType,proto3" json:"DataType,omitempty"`
	// 初次登录类型的请求消息，应该返回的数据，但是目前login还是保持原来的接口，这个就暂时用不到
	LoginResp *FirstLoginData `protobuf:"bytes,3,opt,name=loginResp,proto3" json:"loginResp,omitempty"`
	// 即时im消息，具体消息类型，在ImMsgReqData里面已经注释
	ImMsgData *ImMsgReqData `protobuf:"bytes,4,opt,name=imMsgData,proto3" json:"imMsgData,omitempty"`
	// im离线消息
	OfflineImMsgResp *OfflineImMsgResp `protobuf:"bytes,5,opt,name=offlineImMsgResp,proto3" json:"offlineImMsgResp,omitempty"`
	// 登录建立这个stream流之后，会每隔interval秒（目前暂定5s）收到这样一条消息，可以忽略
	KeepAlive *KeepAlive `protobuf:"bytes,6,opt,name=keepAlive,proto3" json:"keepAlive,omitempty"`
	// 发送消息类型的请求结果
	Res                  *Result  `protobuf:"bytes,7,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamResponse) Reset()         { *m = StreamResponse{} }
func (m *StreamResponse) String() string { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()    {}
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{16}
}

func (m *StreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamResponse.Unmarshal(m, b)
}
func (m *StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamResponse.Marshal(b, m, deterministic)
}
func (m *StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResponse.Merge(m, src)
}
func (m *StreamResponse) XXX_Size() int {
	return xxx_messageInfo_StreamResponse.Size(m)
}
func (m *StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResponse proto.InternalMessageInfo

func (m *StreamResponse) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *StreamResponse) GetDataType() int32 {
	if m != nil {
		return m.DataType
	}
	return 0
}

func (m *StreamResponse) GetLoginResp() *FirstLoginData {
	if m != nil {
		return m.LoginResp
	}
	return nil
}

func (m *StreamResponse) GetImMsgData() *ImMsgReqData {
	if m != nil {
		return m.ImMsgData
	}
	return nil
}

func (m *StreamResponse) GetOfflineImMsgResp() *OfflineImMsgResp {
	if m != nil {
		return m.OfflineImMsgResp
	}
	return nil
}

func (m *StreamResponse) GetKeepAlive() *KeepAlive {
	if m != nil {
		return m.KeepAlive
	}
	return nil
}

func (m *StreamResponse) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

type OfflineImMsgResp struct {
	OfflineImMsgs        []*OfflineImMsg `protobuf:"bytes,1,rep,name=offlineImMsgs,proto3" json:"offlineImMsgs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *OfflineImMsgResp) Reset()         { *m = OfflineImMsgResp{} }
func (m *OfflineImMsgResp) String() string { return proto.CompactTextString(m) }
func (*OfflineImMsgResp) ProtoMessage()    {}
func (*OfflineImMsgResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{17}
}

func (m *OfflineImMsgResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OfflineImMsgResp.Unmarshal(m, b)
}
func (m *OfflineImMsgResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OfflineImMsgResp.Marshal(b, m, deterministic)
}
func (m *OfflineImMsgResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfflineImMsgResp.Merge(m, src)
}
func (m *OfflineImMsgResp) XXX_Size() int {
	return xxx_messageInfo_OfflineImMsgResp.Size(m)
}
func (m *OfflineImMsgResp) XXX_DiscardUnknown() {
	xxx_messageInfo_OfflineImMsgResp.DiscardUnknown(m)
}

var xxx_messageInfo_OfflineImMsgResp proto.InternalMessageInfo

func (m *OfflineImMsgResp) GetOfflineImMsgs() []*OfflineImMsg {
	if m != nil {
		return m.OfflineImMsgs
	}
	return nil
}

type OfflineImMsg struct {
	SenderId             int32           `protobuf:"varint,1,opt,name=SenderId,proto3" json:"SenderId,omitempty"`
	ImMsgData            []*ImMsgReqData `protobuf:"bytes,2,rep,name=imMsgData,proto3" json:"imMsgData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *OfflineImMsg) Reset()         { *m = OfflineImMsg{} }
func (m *OfflineImMsg) String() string { return proto.CompactTextString(m) }
func (*OfflineImMsg) ProtoMessage()    {}
func (*OfflineImMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{18}
}

func (m *OfflineImMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OfflineImMsg.Unmarshal(m, b)
}
func (m *OfflineImMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OfflineImMsg.Marshal(b, m, deterministic)
}
func (m *OfflineImMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfflineImMsg.Merge(m, src)
}
func (m *OfflineImMsg) XXX_Size() int {
	return xxx_messageInfo_OfflineImMsg.Size(m)
}
func (m *OfflineImMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_OfflineImMsg.DiscardUnknown(m)
}

var xxx_messageInfo_OfflineImMsg proto.InternalMessageInfo

func (m *OfflineImMsg) GetSenderId() int32 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *OfflineImMsg) GetImMsgData() []*ImMsgReqData {
	if m != nil {
		return m.ImMsgData
	}
	return nil
}

type FirstLoginData struct {
	UserInfo             *Member         `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	FriendList           []*FriendRecord `protobuf:"bytes,2,rep,name=friend_list,json=friendList,proto3" json:"friend_list,omitempty"`
	GroupList            []*GroupInfo    `protobuf:"bytes,3,rep,name=group_list,json=groupList,proto3" json:"group_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FirstLoginData) Reset()         { *m = FirstLoginData{} }
func (m *FirstLoginData) String() string { return proto.CompactTextString(m) }
func (*FirstLoginData) ProtoMessage()    {}
func (*FirstLoginData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{19}
}

func (m *FirstLoginData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirstLoginData.Unmarshal(m, b)
}
func (m *FirstLoginData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirstLoginData.Marshal(b, m, deterministic)
}
func (m *FirstLoginData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirstLoginData.Merge(m, src)
}
func (m *FirstLoginData) XXX_Size() int {
	return xxx_messageInfo_FirstLoginData.Size(m)
}
func (m *FirstLoginData) XXX_DiscardUnknown() {
	xxx_messageInfo_FirstLoginData.DiscardUnknown(m)
}

var xxx_messageInfo_FirstLoginData proto.InternalMessageInfo

func (m *FirstLoginData) GetUserInfo() *Member {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *FirstLoginData) GetFriendList() []*FriendRecord {
	if m != nil {
		return m.FriendList
	}
	return nil
}

func (m *FirstLoginData) GetGroupList() []*GroupInfo {
	if m != nil {
		return m.GroupList
	}
	return nil
}

type KeepAlive struct {
	Uid                  int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	SYN                  int32    `protobuf:"varint,2,opt,name=SYN,proto3" json:"SYN,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeepAlive) Reset()         { *m = KeepAlive{} }
func (m *KeepAlive) String() string { return proto.CompactTextString(m) }
func (*KeepAlive) ProtoMessage()    {}
func (*KeepAlive) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{20}
}

func (m *KeepAlive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeepAlive.Unmarshal(m, b)
}
func (m *KeepAlive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeepAlive.Marshal(b, m, deterministic)
}
func (m *KeepAlive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepAlive.Merge(m, src)
}
func (m *KeepAlive) XXX_Size() int {
	return xxx_messageInfo_KeepAlive.Size(m)
}
func (m *KeepAlive) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepAlive.DiscardUnknown(m)
}

var xxx_messageInfo_KeepAlive proto.InternalMessageInfo

func (m *KeepAlive) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *KeepAlive) GetSYN() int32 {
	if m != nil {
		return m.SYN
	}
	return 0
}

//************* User_Friend ************
type FriendNewReq struct {
	Uid                  int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Fuid                 int32    `protobuf:"varint,2,opt,name=fuid,proto3" json:"fuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FriendNewReq) Reset()         { *m = FriendNewReq{} }
func (m *FriendNewReq) String() string { return proto.CompactTextString(m) }
func (*FriendNewReq) ProtoMessage()    {}
func (*FriendNewReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{21}
}

func (m *FriendNewReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendNewReq.Unmarshal(m, b)
}
func (m *FriendNewReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendNewReq.Marshal(b, m, deterministic)
}
func (m *FriendNewReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendNewReq.Merge(m, src)
}
func (m *FriendNewReq) XXX_Size() int {
	return xxx_messageInfo_FriendNewReq.Size(m)
}
func (m *FriendNewReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendNewReq.DiscardUnknown(m)
}

var xxx_messageInfo_FriendNewReq proto.InternalMessageInfo

func (m *FriendNewReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FriendNewReq) GetFuid() int32 {
	if m != nil {
		return m.Fuid
	}
	return 0
}

type FriendNewRsp struct {
	Res                  *Result  `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FriendNewRsp) Reset()         { *m = FriendNewRsp{} }
func (m *FriendNewRsp) String() string { return proto.CompactTextString(m) }
func (*FriendNewRsp) ProtoMessage()    {}
func (*FriendNewRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{22}
}

func (m *FriendNewRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendNewRsp.Unmarshal(m, b)
}
func (m *FriendNewRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendNewRsp.Marshal(b, m, deterministic)
}
func (m *FriendNewRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendNewRsp.Merge(m, src)
}
func (m *FriendNewRsp) XXX_Size() int {
	return xxx_messageInfo_FriendNewRsp.Size(m)
}
func (m *FriendNewRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendNewRsp.DiscardUnknown(m)
}

var xxx_messageInfo_FriendNewRsp proto.InternalMessageInfo

func (m *FriendNewRsp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

type FriendDelReq struct {
	Uid                  int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Fuid                 int32    `protobuf:"varint,2,opt,name=fuid,proto3" json:"fuid,omitempty"`
	Timestamp            int32    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FriendDelReq) Reset()         { *m = FriendDelReq{} }
func (m *FriendDelReq) String() string { return proto.CompactTextString(m) }
func (*FriendDelReq) ProtoMessage()    {}
func (*FriendDelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{23}
}

func (m *FriendDelReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendDelReq.Unmarshal(m, b)
}
func (m *FriendDelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendDelReq.Marshal(b, m, deterministic)
}
func (m *FriendDelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendDelReq.Merge(m, src)
}
func (m *FriendDelReq) XXX_Size() int {
	return xxx_messageInfo_FriendDelReq.Size(m)
}
func (m *FriendDelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendDelReq.DiscardUnknown(m)
}

var xxx_messageInfo_FriendDelReq proto.InternalMessageInfo

func (m *FriendDelReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FriendDelReq) GetFuid() int32 {
	if m != nil {
		return m.Fuid
	}
	return 0
}

func (m *FriendDelReq) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type FriendDelRsp struct {
	Err                  *Result  `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FriendDelRsp) Reset()         { *m = FriendDelRsp{} }
func (m *FriendDelRsp) String() string { return proto.CompactTextString(m) }
func (*FriendDelRsp) ProtoMessage()    {}
func (*FriendDelRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{24}
}

func (m *FriendDelRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendDelRsp.Unmarshal(m, b)
}
func (m *FriendDelRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendDelRsp.Marshal(b, m, deterministic)
}
func (m *FriendDelRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendDelRsp.Merge(m, src)
}
func (m *FriendDelRsp) XXX_Size() int {
	return xxx_messageInfo_FriendDelRsp.Size(m)
}
func (m *FriendDelRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendDelRsp.DiscardUnknown(m)
}

var xxx_messageInfo_FriendDelRsp proto.InternalMessageInfo

func (m *FriendDelRsp) GetErr() *Result {
	if m != nil {
		return m.Err
	}
	return nil
}

type FriendsReq struct {
	Uid                  int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FriendsReq) Reset()         { *m = FriendsReq{} }
func (m *FriendsReq) String() string { return proto.CompactTextString(m) }
func (*FriendsReq) ProtoMessage()    {}
func (*FriendsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{25}
}

func (m *FriendsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendsReq.Unmarshal(m, b)
}
func (m *FriendsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendsReq.Marshal(b, m, deterministic)
}
func (m *FriendsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendsReq.Merge(m, src)
}
func (m *FriendsReq) XXX_Size() int {
	return xxx_messageInfo_FriendsReq.Size(m)
}
func (m *FriendsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendsReq.DiscardUnknown(m)
}

var xxx_messageInfo_FriendsReq proto.InternalMessageInfo

func (m *FriendsReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type FriendRecord struct {
	Uid                  int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Imei                 int64    `protobuf:"varint,3,opt,name=imei,proto3" json:"imei,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FriendRecord) Reset()         { *m = FriendRecord{} }
func (m *FriendRecord) String() string { return proto.CompactTextString(m) }
func (*FriendRecord) ProtoMessage()    {}
func (*FriendRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{26}
}

func (m *FriendRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendRecord.Unmarshal(m, b)
}
func (m *FriendRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendRecord.Marshal(b, m, deterministic)
}
func (m *FriendRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendRecord.Merge(m, src)
}
func (m *FriendRecord) XXX_Size() int {
	return xxx_messageInfo_FriendRecord.Size(m)
}
func (m *FriendRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendRecord.DiscardUnknown(m)
}

var xxx_messageInfo_FriendRecord proto.InternalMessageInfo

func (m *FriendRecord) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FriendRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FriendRecord) GetImei() int64 {
	if m != nil {
		return m.Imei
	}
	return 0
}

type FriendsRsp struct {
	Uid                  int32           `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	FriendList           []*FriendRecord `protobuf:"bytes,2,rep,name=friend_list,json=friendList,proto3" json:"friend_list,omitempty"`
	Res                  *Result         `protobuf:"bytes,3,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FriendsRsp) Reset()         { *m = FriendsRsp{} }
func (m *FriendsRsp) String() string { return proto.CompactTextString(m) }
func (*FriendsRsp) ProtoMessage()    {}
func (*FriendsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{27}
}

func (m *FriendsRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendsRsp.Unmarshal(m, b)
}
func (m *FriendsRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendsRsp.Marshal(b, m, deterministic)
}
func (m *FriendsRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendsRsp.Merge(m, src)
}
func (m *FriendsRsp) XXX_Size() int {
	return xxx_messageInfo_FriendsRsp.Size(m)
}
func (m *FriendsRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendsRsp.DiscardUnknown(m)
}

var xxx_messageInfo_FriendsRsp proto.InternalMessageInfo

func (m *FriendsRsp) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FriendsRsp) GetFriendList() []*FriendRecord {
	if m != nil {
		return m.FriendList
	}
	return nil
}

func (m *FriendsRsp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

type UserSearchReq struct {
	Uid                  int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Target               string   `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserSearchReq) Reset()         { *m = UserSearchReq{} }
func (m *UserSearchReq) String() string { return proto.CompactTextString(m) }
func (*UserSearchReq) ProtoMessage()    {}
func (*UserSearchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{28}
}

func (m *UserSearchReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSearchReq.Unmarshal(m, b)
}
func (m *UserSearchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSearchReq.Marshal(b, m, deterministic)
}
func (m *UserSearchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSearchReq.Merge(m, src)
}
func (m *UserSearchReq) XXX_Size() int {
	return xxx_messageInfo_UserSearchReq.Size(m)
}
func (m *UserSearchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSearchReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserSearchReq proto.InternalMessageInfo

func (m *UserSearchReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserSearchReq) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type UserRecord struct {
	Uid                  int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Imei                 string   `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Online               int32    `protobuf:"varint,4,opt,name=online,proto3" json:"online,omitempty"`
	LockGroupId          int32    `protobuf:"varint,5,opt,name=LockGroupId,proto3" json:"LockGroupId,omitempty"`
	UserType             int32    `protobuf:"varint,6,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	GrpRole              int32    `protobuf:"varint,7,opt,name=grp_role,json=grpRole,proto3" json:"grp_role,omitempty"`
	IsFriend             bool     `protobuf:"varint,8,opt,name=isFriend,proto3" json:"isFriend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRecord) Reset()         { *m = UserRecord{} }
func (m *UserRecord) String() string { return proto.CompactTextString(m) }
func (*UserRecord) ProtoMessage()    {}
func (*UserRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{29}
}

func (m *UserRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRecord.Unmarshal(m, b)
}
func (m *UserRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRecord.Marshal(b, m, deterministic)
}
func (m *UserRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRecord.Merge(m, src)
}
func (m *UserRecord) XXX_Size() int {
	return xxx_messageInfo_UserRecord.Size(m)
}
func (m *UserRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRecord.DiscardUnknown(m)
}

var xxx_messageInfo_UserRecord proto.InternalMessageInfo

func (m *UserRecord) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserRecord) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *UserRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserRecord) GetOnline() int32 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *UserRecord) GetLockGroupId() int32 {
	if m != nil {
		return m.LockGroupId
	}
	return 0
}

func (m *UserRecord) GetUserType() int32 {
	if m != nil {
		return m.UserType
	}
	return 0
}

func (m *UserRecord) GetGrpRole() int32 {
	if m != nil {
		return m.GrpRole
	}
	return 0
}

func (m *UserRecord) GetIsFriend() bool {
	if m != nil {
		return m.IsFriend
	}
	return false
}

type UserSearchRsp struct {
	Res                  *Result       `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	UserList             []*UserRecord `protobuf:"bytes,2,rep,name=user_list,json=userList,proto3" json:"user_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UserSearchRsp) Reset()         { *m = UserSearchRsp{} }
func (m *UserSearchRsp) String() string { return proto.CompactTextString(m) }
func (*UserSearchRsp) ProtoMessage()    {}
func (*UserSearchRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{30}
}

func (m *UserSearchRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSearchRsp.Unmarshal(m, b)
}
func (m *UserSearchRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSearchRsp.Marshal(b, m, deterministic)
}
func (m *UserSearchRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSearchRsp.Merge(m, src)
}
func (m *UserSearchRsp) XXX_Size() int {
	return xxx_messageInfo_UserSearchRsp.Size(m)
}
func (m *UserSearchRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSearchRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UserSearchRsp proto.InternalMessageInfo

func (m *UserSearchRsp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

func (m *UserSearchRsp) GetUserList() []*UserRecord {
	if m != nil {
		return m.UserList
	}
	return nil
}

type CreateGroupReq struct {
	//    repeated int32 deviceIds = 1;
	DeviceIds            string    `protobuf:"bytes,1,opt,name=deviceIds,proto3" json:"deviceIds,omitempty"`
	GroupName            string    `protobuf:"bytes,2,opt,name=groupName,proto3" json:"groupName,omitempty"`
	AccountId            int32     `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	DeviceInfos          []*Member `protobuf:"bytes,4,rep,name=deviceInfos,proto3" json:"deviceInfos,omitempty"`
	GroupInfo            *Group    `protobuf:"bytes,5,opt,name=groupInfo,proto3" json:"groupInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateGroupReq) Reset()         { *m = CreateGroupReq{} }
func (m *CreateGroupReq) String() string { return proto.CompactTextString(m) }
func (*CreateGroupReq) ProtoMessage()    {}
func (*CreateGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{31}
}

func (m *CreateGroupReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateGroupReq.Unmarshal(m, b)
}
func (m *CreateGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateGroupReq.Marshal(b, m, deterministic)
}
func (m *CreateGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGroupReq.Merge(m, src)
}
func (m *CreateGroupReq) XXX_Size() int {
	return xxx_messageInfo_CreateGroupReq.Size(m)
}
func (m *CreateGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGroupReq proto.InternalMessageInfo

func (m *CreateGroupReq) GetDeviceIds() string {
	if m != nil {
		return m.DeviceIds
	}
	return ""
}

func (m *CreateGroupReq) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *CreateGroupReq) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CreateGroupReq) GetDeviceInfos() []*Member {
	if m != nil {
		return m.DeviceInfos
	}
	return nil
}

func (m *CreateGroupReq) GetGroupInfo() *Group {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

type CreateGroupResp struct {
	GroupInfo            *GroupInfo `protobuf:"bytes,1,opt,name=GroupInfo,proto3" json:"GroupInfo,omitempty"`
	Res                  *Result    `protobuf:"bytes,2,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateGroupResp) Reset()         { *m = CreateGroupResp{} }
func (m *CreateGroupResp) String() string { return proto.CompactTextString(m) }
func (*CreateGroupResp) ProtoMessage()    {}
func (*CreateGroupResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{32}
}

func (m *CreateGroupResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateGroupResp.Unmarshal(m, b)
}
func (m *CreateGroupResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateGroupResp.Marshal(b, m, deterministic)
}
func (m *CreateGroupResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGroupResp.Merge(m, src)
}
func (m *CreateGroupResp) XXX_Size() int {
	return xxx_messageInfo_CreateGroupResp.Size(m)
}
func (m *CreateGroupResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGroupResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGroupResp proto.InternalMessageInfo

func (m *CreateGroupResp) GetGroupInfo() *GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

func (m *CreateGroupResp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

type GrpUserAddReq struct {
	Uid                  int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid                  int32    `protobuf:"varint,2,opt,name=gid,proto3" json:"gid,omitempty"`
	Timestamp            int32    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrpUserAddReq) Reset()         { *m = GrpUserAddReq{} }
func (m *GrpUserAddReq) String() string { return proto.CompactTextString(m) }
func (*GrpUserAddReq) ProtoMessage()    {}
func (*GrpUserAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{33}
}

func (m *GrpUserAddReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpUserAddReq.Unmarshal(m, b)
}
func (m *GrpUserAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpUserAddReq.Marshal(b, m, deterministic)
}
func (m *GrpUserAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpUserAddReq.Merge(m, src)
}
func (m *GrpUserAddReq) XXX_Size() int {
	return xxx_messageInfo_GrpUserAddReq.Size(m)
}
func (m *GrpUserAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpUserAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_GrpUserAddReq proto.InternalMessageInfo

func (m *GrpUserAddReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GrpUserAddReq) GetGid() int32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *GrpUserAddReq) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type GrpUserAddRsp struct {
	Res                  *Result  `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrpUserAddRsp) Reset()         { *m = GrpUserAddRsp{} }
func (m *GrpUserAddRsp) String() string { return proto.CompactTextString(m) }
func (*GrpUserAddRsp) ProtoMessage()    {}
func (*GrpUserAddRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{34}
}

func (m *GrpUserAddRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpUserAddRsp.Unmarshal(m, b)
}
func (m *GrpUserAddRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpUserAddRsp.Marshal(b, m, deterministic)
}
func (m *GrpUserAddRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpUserAddRsp.Merge(m, src)
}
func (m *GrpUserAddRsp) XXX_Size() int {
	return xxx_messageInfo_GrpUserAddRsp.Size(m)
}
func (m *GrpUserAddRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpUserAddRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GrpUserAddRsp proto.InternalMessageInfo

func (m *GrpUserAddRsp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

type GrpUserDelReq struct {
	Uid                  int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid                  int32    `protobuf:"varint,2,opt,name=gid,proto3" json:"gid,omitempty"`
	Timestamp            int32    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrpUserDelReq) Reset()         { *m = GrpUserDelReq{} }
func (m *GrpUserDelReq) String() string { return proto.CompactTextString(m) }
func (*GrpUserDelReq) ProtoMessage()    {}
func (*GrpUserDelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{35}
}

func (m *GrpUserDelReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpUserDelReq.Unmarshal(m, b)
}
func (m *GrpUserDelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpUserDelReq.Marshal(b, m, deterministic)
}
func (m *GrpUserDelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpUserDelReq.Merge(m, src)
}
func (m *GrpUserDelReq) XXX_Size() int {
	return xxx_messageInfo_GrpUserDelReq.Size(m)
}
func (m *GrpUserDelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpUserDelReq.DiscardUnknown(m)
}

var xxx_messageInfo_GrpUserDelReq proto.InternalMessageInfo

func (m *GrpUserDelReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GrpUserDelReq) GetGid() int32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *GrpUserDelReq) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type GrpUserDelRsp struct {
	Res                  *Result  `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrpUserDelRsp) Reset()         { *m = GrpUserDelRsp{} }
func (m *GrpUserDelRsp) String() string { return proto.CompactTextString(m) }
func (*GrpUserDelRsp) ProtoMessage()    {}
func (*GrpUserDelRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{36}
}

func (m *GrpUserDelRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpUserDelRsp.Unmarshal(m, b)
}
func (m *GrpUserDelRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpUserDelRsp.Marshal(b, m, deterministic)
}
func (m *GrpUserDelRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpUserDelRsp.Merge(m, src)
}
func (m *GrpUserDelRsp) XXX_Size() int {
	return xxx_messageInfo_GrpUserDelRsp.Size(m)
}
func (m *GrpUserDelRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpUserDelRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GrpUserDelRsp proto.InternalMessageInfo

func (m *GrpUserDelRsp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

type UserExitReq struct {
	Uid                  int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid                  int32    `protobuf:"varint,2,opt,name=gid,proto3" json:"gid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserExitReq) Reset()         { *m = UserExitReq{} }
func (m *UserExitReq) String() string { return proto.CompactTextString(m) }
func (*UserExitReq) ProtoMessage()    {}
func (*UserExitReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{37}
}

func (m *UserExitReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserExitReq.Unmarshal(m, b)
}
func (m *UserExitReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserExitReq.Marshal(b, m, deterministic)
}
func (m *UserExitReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserExitReq.Merge(m, src)
}
func (m *UserExitReq) XXX_Size() int {
	return xxx_messageInfo_UserExitReq.Size(m)
}
func (m *UserExitReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserExitReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserExitReq proto.InternalMessageInfo

func (m *UserExitReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserExitReq) GetGid() int32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

type UserExitRsp struct {
	Res                  *Result  `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserExitRsp) Reset()         { *m = UserExitRsp{} }
func (m *UserExitRsp) String() string { return proto.CompactTextString(m) }
func (*UserExitRsp) ProtoMessage()    {}
func (*UserExitRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{38}
}

func (m *UserExitRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserExitRsp.Unmarshal(m, b)
}
func (m *UserExitRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserExitRsp.Marshal(b, m, deterministic)
}
func (m *UserExitRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserExitRsp.Merge(m, src)
}
func (m *UserExitRsp) XXX_Size() int {
	return xxx_messageInfo_UserExitRsp.Size(m)
}
func (m *UserExitRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserExitRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UserExitRsp proto.InternalMessageInfo

func (m *UserExitRsp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

type GroupDelReq struct {
	Uid                  int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	RoleType             int32    `protobuf:"varint,2,opt,name=role_type,json=roleType,proto3" json:"role_type,omitempty"`
	Gid                  int32    `protobuf:"varint,3,opt,name=gid,proto3" json:"gid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupDelReq) Reset()         { *m = GroupDelReq{} }
func (m *GroupDelReq) String() string { return proto.CompactTextString(m) }
func (*GroupDelReq) ProtoMessage()    {}
func (*GroupDelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{39}
}

func (m *GroupDelReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupDelReq.Unmarshal(m, b)
}
func (m *GroupDelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupDelReq.Marshal(b, m, deterministic)
}
func (m *GroupDelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupDelReq.Merge(m, src)
}
func (m *GroupDelReq) XXX_Size() int {
	return xxx_messageInfo_GroupDelReq.Size(m)
}
func (m *GroupDelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupDelReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupDelReq proto.InternalMessageInfo

func (m *GroupDelReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GroupDelReq) GetRoleType() int32 {
	if m != nil {
		return m.RoleType
	}
	return 0
}

func (m *GroupDelReq) GetGid() int32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

type GroupDelRsp struct {
	Res                  *Result  `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupDelRsp) Reset()         { *m = GroupDelRsp{} }
func (m *GroupDelRsp) String() string { return proto.CompactTextString(m) }
func (*GroupDelRsp) ProtoMessage()    {}
func (*GroupDelRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{40}
}

func (m *GroupDelRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupDelRsp.Unmarshal(m, b)
}
func (m *GroupDelRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupDelRsp.Marshal(b, m, deterministic)
}
func (m *GroupDelRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupDelRsp.Merge(m, src)
}
func (m *GroupDelRsp) XXX_Size() int {
	return xxx_messageInfo_GroupDelRsp.Size(m)
}
func (m *GroupDelRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupDelRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GroupDelRsp proto.InternalMessageInfo

func (m *GroupDelRsp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

type GrpListReq struct {
	Uid                  int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrpListReq) Reset()         { *m = GrpListReq{} }
func (m *GrpListReq) String() string { return proto.CompactTextString(m) }
func (*GrpListReq) ProtoMessage()    {}
func (*GrpListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{41}
}

func (m *GrpListReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpListReq.Unmarshal(m, b)
}
func (m *GrpListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpListReq.Marshal(b, m, deterministic)
}
func (m *GrpListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpListReq.Merge(m, src)
}
func (m *GrpListReq) XXX_Size() int {
	return xxx_messageInfo_GrpListReq.Size(m)
}
func (m *GrpListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GrpListReq proto.InternalMessageInfo

func (m *GrpListReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type GroupInfo struct {
	Gid                  int32         `protobuf:"varint,1,opt,name=gid,proto3" json:"gid,omitempty"`
	GroupName            string        `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	GroupManager         int32         `protobuf:"varint,3,opt,name=group_manager,json=groupManager,proto3" json:"group_manager,omitempty"`
	UsrList              []*UserRecord `protobuf:"bytes,4,rep,name=usr_list,json=usrList,proto3" json:"usr_list,omitempty"`
	IsExist              bool          `protobuf:"varint,5,opt,name=isExist,proto3" json:"isExist,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GroupInfo) Reset()         { *m = GroupInfo{} }
func (m *GroupInfo) String() string { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()    {}
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{42}
}

func (m *GroupInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupInfo.Unmarshal(m, b)
}
func (m *GroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupInfo.Marshal(b, m, deterministic)
}
func (m *GroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupInfo.Merge(m, src)
}
func (m *GroupInfo) XXX_Size() int {
	return xxx_messageInfo_GroupInfo.Size(m)
}
func (m *GroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GroupInfo proto.InternalMessageInfo

func (m *GroupInfo) GetGid() int32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *GroupInfo) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *GroupInfo) GetGroupManager() int32 {
	if m != nil {
		return m.GroupManager
	}
	return 0
}

func (m *GroupInfo) GetUsrList() []*UserRecord {
	if m != nil {
		return m.UsrList
	}
	return nil
}

func (m *GroupInfo) GetIsExist() bool {
	if m != nil {
		return m.IsExist
	}
	return false
}

// 返回模糊查找以及目前用户所在的群组
type GroupListRsp struct {
	Uid                  int32        `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GroupList            []*GroupInfo `protobuf:"bytes,2,rep,name=group_list,json=groupList,proto3" json:"group_list,omitempty"`
	Res                  *Result      `protobuf:"bytes,3,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GroupListRsp) Reset()         { *m = GroupListRsp{} }
func (m *GroupListRsp) String() string { return proto.CompactTextString(m) }
func (*GroupListRsp) ProtoMessage()    {}
func (*GroupListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{43}
}

func (m *GroupListRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupListRsp.Unmarshal(m, b)
}
func (m *GroupListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupListRsp.Marshal(b, m, deterministic)
}
func (m *GroupListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupListRsp.Merge(m, src)
}
func (m *GroupListRsp) XXX_Size() int {
	return xxx_messageInfo_GroupListRsp.Size(m)
}
func (m *GroupListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GroupListRsp proto.InternalMessageInfo

func (m *GroupListRsp) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GroupListRsp) GetGroupList() []*GroupInfo {
	if m != nil {
		return m.GroupList
	}
	return nil
}

func (m *GroupListRsp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

type GrpSearchReq struct {
	Uid                  int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Target               string   `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrpSearchReq) Reset()         { *m = GrpSearchReq{} }
func (m *GrpSearchReq) String() string { return proto.CompactTextString(m) }
func (*GrpSearchReq) ProtoMessage()    {}
func (*GrpSearchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{44}
}

func (m *GrpSearchReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpSearchReq.Unmarshal(m, b)
}
func (m *GrpSearchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpSearchReq.Marshal(b, m, deterministic)
}
func (m *GrpSearchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpSearchReq.Merge(m, src)
}
func (m *GrpSearchReq) XXX_Size() int {
	return xxx_messageInfo_GrpSearchReq.Size(m)
}
func (m *GrpSearchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpSearchReq.DiscardUnknown(m)
}

var xxx_messageInfo_GrpSearchReq proto.InternalMessageInfo

func (m *GrpSearchReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GrpSearchReq) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type InviteUserReq struct {
	Gid                  int32    `protobuf:"varint,1,opt,name=gid,proto3" json:"gid,omitempty"`
	Uids                 string   `protobuf:"bytes,2,opt,name=uids,proto3" json:"uids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InviteUserReq) Reset()         { *m = InviteUserReq{} }
func (m *InviteUserReq) String() string { return proto.CompactTextString(m) }
func (*InviteUserReq) ProtoMessage()    {}
func (*InviteUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{45}
}

func (m *InviteUserReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InviteUserReq.Unmarshal(m, b)
}
func (m *InviteUserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InviteUserReq.Marshal(b, m, deterministic)
}
func (m *InviteUserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteUserReq.Merge(m, src)
}
func (m *InviteUserReq) XXX_Size() int {
	return xxx_messageInfo_InviteUserReq.Size(m)
}
func (m *InviteUserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteUserReq.DiscardUnknown(m)
}

var xxx_messageInfo_InviteUserReq proto.InternalMessageInfo

func (m *InviteUserReq) GetGid() int32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *InviteUserReq) GetUids() string {
	if m != nil {
		return m.Uids
	}
	return ""
}

type InviteUserResp struct {
	UsrList              []*UserRecord `protobuf:"bytes,1,rep,name=usr_list,json=usrList,proto3" json:"usr_list,omitempty"`
	Res                  *Result       `protobuf:"bytes,2,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *InviteUserResp) Reset()         { *m = InviteUserResp{} }
func (m *InviteUserResp) String() string { return proto.CompactTextString(m) }
func (*InviteUserResp) ProtoMessage()    {}
func (*InviteUserResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{46}
}

func (m *InviteUserResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InviteUserResp.Unmarshal(m, b)
}
func (m *InviteUserResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InviteUserResp.Marshal(b, m, deterministic)
}
func (m *InviteUserResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteUserResp.Merge(m, src)
}
func (m *InviteUserResp) XXX_Size() int {
	return xxx_messageInfo_InviteUserResp.Size(m)
}
func (m *InviteUserResp) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteUserResp.DiscardUnknown(m)
}

var xxx_messageInfo_InviteUserResp proto.InternalMessageInfo

func (m *InviteUserResp) GetUsrList() []*UserRecord {
	if m != nil {
		return m.UsrList
	}
	return nil
}

func (m *InviteUserResp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

type GetGroupInfoReq struct {
	Gid                  int32    `protobuf:"varint,1,opt,name=gid,proto3" json:"gid,omitempty"`
	Uid                  int32    `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGroupInfoReq) Reset()         { *m = GetGroupInfoReq{} }
func (m *GetGroupInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetGroupInfoReq) ProtoMessage()    {}
func (*GetGroupInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{47}
}

func (m *GetGroupInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGroupInfoReq.Unmarshal(m, b)
}
func (m *GetGroupInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGroupInfoReq.Marshal(b, m, deterministic)
}
func (m *GetGroupInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGroupInfoReq.Merge(m, src)
}
func (m *GetGroupInfoReq) XXX_Size() int {
	return xxx_messageInfo_GetGroupInfoReq.Size(m)
}
func (m *GetGroupInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGroupInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetGroupInfoReq proto.InternalMessageInfo

func (m *GetGroupInfoReq) GetGid() int32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *GetGroupInfoReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type GetGroupInfoResp struct {
	GroupInfo            *GroupInfo `protobuf:"bytes,1,opt,name=groupInfo,proto3" json:"groupInfo,omitempty"`
	Res                  *Result    `protobuf:"bytes,2,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetGroupInfoResp) Reset()         { *m = GetGroupInfoResp{} }
func (m *GetGroupInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetGroupInfoResp) ProtoMessage()    {}
func (*GetGroupInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5696941eb593683, []int{48}
}

func (m *GetGroupInfoResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGroupInfoResp.Unmarshal(m, b)
}
func (m *GetGroupInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGroupInfoResp.Marshal(b, m, deterministic)
}
func (m *GetGroupInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGroupInfoResp.Merge(m, src)
}
func (m *GetGroupInfoResp) XXX_Size() int {
	return xxx_messageInfo_GetGroupInfoResp.Size(m)
}
func (m *GetGroupInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGroupInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetGroupInfoResp proto.InternalMessageInfo

func (m *GetGroupInfoResp) GetGroupInfo() *GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

func (m *GetGroupInfoResp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

func init() {
	proto.RegisterType((*Head)(nil), "talk_cloud.Head")
	proto.RegisterType((*AppRegReq)(nil), "talk_cloud.AppRegReq")
	proto.RegisterType((*AppRegRsp)(nil), "talk_cloud.AppRegRsp")
	proto.RegisterType((*DeviceRegReq)(nil), "talk_cloud.DeviceRegReq")
	proto.RegisterType((*DeviceRegRsp)(nil), "talk_cloud.DeviceRegRsp")
	proto.RegisterType((*LoginReq)(nil), "talk_cloud.LoginReq")
	proto.RegisterType((*LoginRsp)(nil), "talk_cloud.LoginRsp")
	proto.RegisterType((*ImMsgReqData)(nil), "talk_cloud.ImMsgReqData")
	proto.RegisterType((*ImMsgRespData)(nil), "talk_cloud.ImMsgRespData")
	proto.RegisterType((*LogoutReq)(nil), "talk_cloud.LogoutReq")
	proto.RegisterType((*LogoutRsp)(nil), "talk_cloud.LogoutRsp")
	proto.RegisterType((*SetLockGroupIdReq)(nil), "talk_cloud.SetLockGroupIdReq")
	proto.RegisterType((*SetLockGroupIdResp)(nil), "talk_cloud.SetLockGroupIdResp")
	proto.RegisterType((*StreamRequest)(nil), "talk_cloud.StreamRequest")
	proto.RegisterType((*UploadFileData)(nil), "talk_cloud.UploadFileData")
	proto.RegisterType((*ImReceiver)(nil), "talk_cloud.ImReceiver")
	proto.RegisterType((*StreamResponse)(nil), "talk_cloud.StreamResponse")
	proto.RegisterType((*OfflineImMsgResp)(nil), "talk_cloud.OfflineImMsgResp")
	proto.RegisterType((*OfflineImMsg)(nil), "talk_cloud.OfflineImMsg")
	proto.RegisterType((*FirstLoginData)(nil), "talk_cloud.FirstLoginData")
	proto.RegisterType((*KeepAlive)(nil), "talk_cloud.KeepAlive")
	proto.RegisterType((*FriendNewReq)(nil), "talk_cloud.FriendNewReq")
	proto.RegisterType((*FriendNewRsp)(nil), "talk_cloud.FriendNewRsp")
	proto.RegisterType((*FriendDelReq)(nil), "talk_cloud.FriendDelReq")
	proto.RegisterType((*FriendDelRsp)(nil), "talk_cloud.FriendDelRsp")
	proto.RegisterType((*FriendsReq)(nil), "talk_cloud.FriendsReq")
	proto.RegisterType((*FriendRecord)(nil), "talk_cloud.FriendRecord")
	proto.RegisterType((*FriendsRsp)(nil), "talk_cloud.FriendsRsp")
	proto.RegisterType((*UserSearchReq)(nil), "talk_cloud.UserSearchReq")
	proto.RegisterType((*UserRecord)(nil), "talk_cloud.UserRecord")
	proto.RegisterType((*UserSearchRsp)(nil), "talk_cloud.UserSearchRsp")
	proto.RegisterType((*CreateGroupReq)(nil), "talk_cloud.CreateGroupReq")
	proto.RegisterType((*CreateGroupResp)(nil), "talk_cloud.CreateGroupResp")
	proto.RegisterType((*GrpUserAddReq)(nil), "talk_cloud.GrpUserAddReq")
	proto.RegisterType((*GrpUserAddRsp)(nil), "talk_cloud.GrpUserAddRsp")
	proto.RegisterType((*GrpUserDelReq)(nil), "talk_cloud.GrpUserDelReq")
	proto.RegisterType((*GrpUserDelRsp)(nil), "talk_cloud.GrpUserDelRsp")
	proto.RegisterType((*UserExitReq)(nil), "talk_cloud.UserExitReq")
	proto.RegisterType((*UserExitRsp)(nil), "talk_cloud.UserExitRsp")
	proto.RegisterType((*GroupDelReq)(nil), "talk_cloud.GroupDelReq")
	proto.RegisterType((*GroupDelRsp)(nil), "talk_cloud.GroupDelRsp")
	proto.RegisterType((*GrpListReq)(nil), "talk_cloud.GrpListReq")
	proto.RegisterType((*GroupInfo)(nil), "talk_cloud.GroupInfo")
	proto.RegisterType((*GroupListRsp)(nil), "talk_cloud.GroupListRsp")
	proto.RegisterType((*GrpSearchReq)(nil), "talk_cloud.GrpSearchReq")
	proto.RegisterType((*InviteUserReq)(nil), "talk_cloud.InviteUserReq")
	proto.RegisterType((*InviteUserResp)(nil), "talk_cloud.InviteUserResp")
	proto.RegisterType((*GetGroupInfoReq)(nil), "talk_cloud.GetGroupInfoReq")
	proto.RegisterType((*GetGroupInfoResp)(nil), "talk_cloud.GetGroupInfoResp")
}

func init() { proto.RegisterFile("talk_cloud_app.proto", fileDescriptor_b5696941eb593683) }

var fileDescriptor_b5696941eb593683 = []byte{
	// 1780 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x5f, 0x4f, 0xdc, 0xc6,
	0x16, 0xc7, 0xfb, 0x07, 0xf0, 0x59, 0x76, 0x43, 0xe6, 0xe6, 0x72, 0x89, 0x43, 0xb8, 0xc8, 0x37,
	0x0f, 0xe8, 0x3e, 0x90, 0x1b, 0x02, 0xb7, 0x49, 0xdb, 0xb4, 0x22, 0x21, 0x2c, 0x9b, 0x00, 0x4d,
	0x86, 0xa4, 0x52, 0xa4, 0x54, 0x2b, 0xb3, 0x1e, 0x16, 0x17, 0xaf, 0x6d, 0x3c, 0x5e, 0x92, 0x48,
	0x95, 0xfa, 0xd4, 0xef, 0xd1, 0x4f, 0x50, 0xa9, 0x1f, 0x25, 0x52, 0xab, 0x7e, 0x9c, 0x56, 0x33,
	0xe3, 0xb1, 0x67, 0x58, 0x7b, 0xd9, 0x24, 0x2f, 0x7d, 0xf3, 0x9c, 0x7f, 0x73, 0xe6, 0x77, 0xe6,
	0xfc, 0x99, 0x5d, 0xb8, 0x96, 0x38, 0xfe, 0x69, 0xb7, 0xe7, 0x87, 0x43, 0xb7, 0xeb, 0x44, 0xd1,
	0x5a, 0x14, 0x87, 0x49, 0x88, 0x20, 0xa7, 0x5a, 0x0b, 0x8a, 0xc4, 0x20, 0x74, 0x89, 0x2f, 0x64,
	0xec, 0x2e, 0xd4, 0x76, 0x89, 0xe3, 0xa2, 0x45, 0x98, 0x39, 0x27, 0x31, 0xf5, 0xc2, 0x60, 0xd1,
	0x58, 0x31, 0x56, 0x4d, 0x2c, 0x97, 0xe8, 0xdf, 0xd0, 0xa0, 0xc3, 0xa3, 0xae, 0xe4, 0x56, 0x38,
	0x17, 0xe8, 0xf0, 0xe8, 0xdb, 0x54, 0x60, 0x09, 0xcc, 0xc4, 0x1b, 0x10, 0x9a, 0x38, 0x83, 0x68,
	0xb1, 0xba, 0x62, 0xac, 0xd6, 0x71, 0x4e, 0xb0, 0x1d, 0x30, 0xb7, 0xa2, 0x08, 0x93, 0x3e, 0x26,
	0x67, 0xe8, 0x16, 0xd4, 0x4e, 0x88, 0xe3, 0xf2, 0x2d, 0x1a, 0xeb, 0xf3, 0x6b, 0xb9, 0x53, 0x6b,
	0xcc, 0x0b, 0xcc, 0xb9, 0x08, 0x41, 0x2d, 0x70, 0x06, 0x24, 0xdd, 0x8a, 0x7f, 0x23, 0x0b, 0x66,
	0x23, 0x87, 0xd2, 0x37, 0x61, 0xec, 0xf2, 0x3d, 0x4c, 0x9c, 0xad, 0xed, 0xef, 0xb2, 0x2d, 0x68,
	0x84, 0x5a, 0x50, 0xf1, 0xc4, 0x06, 0x75, 0x5c, 0xf1, 0x5c, 0xa6, 0x38, 0xa4, 0x24, 0x3e, 0xc8,
	0x0d, 0x66, 0x6b, 0x74, 0x0b, 0xaa, 0x31, 0xa1, 0xdc, 0x5e, 0x63, 0x1d, 0xa9, 0xde, 0x60, 0x42,
	0x87, 0x7e, 0x82, 0x19, 0xdb, 0x3e, 0x80, 0xb9, 0x6d, 0x72, 0xee, 0xf5, 0x48, 0x7a, 0x88, 0x9b,
	0x00, 0x4e, 0xaf, 0x17, 0x0e, 0x83, 0xa4, 0x9b, 0xed, 0x64, 0xa6, 0x94, 0x8e, 0xcb, 0xf0, 0x72,
	0xb9, 0x78, 0xd7, 0xf7, 0x68, 0x22, 0xf1, 0x12, 0xa4, 0x3d, 0x8f, 0x26, 0xf6, 0x86, 0x6a, 0x8f,
	0x46, 0xd2, 0x0b, 0x63, 0xbc, 0x17, 0xaf, 0x61, 0x76, 0x2f, 0xec, 0x7b, 0xc1, 0xa7, 0xc1, 0xb8,
	0x00, 0xd3, 0x1c, 0x36, 0x09, 0x62, 0xba, 0xb2, 0xdf, 0x1b, 0xd2, 0x3c, 0x8d, 0xd0, 0x9a, 0x80,
	0xac, 0x13, 0x1c, 0x87, 0x45, 0x5e, 0xed, 0x93, 0xc1, 0x11, 0x89, 0x71, 0x26, 0x83, 0xee, 0x43,
	0xe3, 0x38, 0xf6, 0x48, 0xe0, 0xca, 0x13, 0x57, 0x57, 0x1b, 0xeb, 0x8b, 0xaa, 0xca, 0x0e, 0x67,
	0x63, 0xd2, 0x0b, 0x63, 0x17, 0x83, 0x10, 0x66, 0x58, 0xa0, 0x0d, 0x80, 0x7e, 0x1c, 0x0e, 0x23,
	0xa1, 0x59, 0xe5, 0x9a, 0xff, 0x54, 0x35, 0xdb, 0x8c, 0xcb, 0x76, 0xc1, 0x26, 0x17, 0xe4, 0x5a,
	0x29, 0x62, 0xb5, 0xf1, 0x88, 0xfd, 0x6c, 0xc0, 0x5c, 0x67, 0xb0, 0x4f, 0x59, 0xd0, 0xb6, 0x9d,
	0xc4, 0x19, 0xb9, 0x1a, 0x36, 0xcc, 0x61, 0xd2, 0x23, 0xde, 0x39, 0x89, 0x5f, 0xbc, 0x8b, 0x04,
	0x50, 0x75, 0xac, 0xd1, 0xd0, 0x32, 0x80, 0x5c, 0x77, 0xdc, 0xf4, 0x76, 0x2b, 0x14, 0x61, 0x83,
	0x86, 0xc3, 0xb8, 0x47, 0x9e, 0x39, 0xc9, 0x09, 0xf7, 0xc9, 0xc4, 0x1a, 0x8d, 0xe5, 0xd6, 0x3e,
	0xed, 0xf3, 0x2d, 0xea, 0xdc, 0x80, 0x5c, 0xda, 0x5f, 0x40, 0x33, 0xf5, 0x90, 0x46, 0xdc, 0xc5,
	0xff, 0xc2, 0x74, 0xcc, 0x8f, 0x30, 0xe6, 0x3a, 0xa4, 0x12, 0xf6, 0x63, 0x30, 0xf7, 0xc2, 0x7e,
	0x38, 0x4c, 0x3e, 0xe9, 0x4a, 0xd8, 0x77, 0x32, 0x33, 0x13, 0xdf, 0xc5, 0xcf, 0xe0, 0xea, 0x21,
	0x49, 0xf6, 0xc2, 0xde, 0xa9, 0x08, 0x8f, 0xcb, 0x3c, 0x98, 0x87, 0xea, 0xb0, 0x23, 0xe1, 0x65,
	0x9f, 0x8c, 0xd2, 0xef, 0xb8, 0x29, 0xac, 0xec, 0xd3, 0xfe, 0x1c, 0xd0, 0x45, 0x45, 0xb1, 0x29,
	0x1e, 0xbf, 0x29, 0x26, 0xd4, 0xfe, 0xc3, 0x80, 0xe6, 0x61, 0x12, 0x13, 0x67, 0x80, 0xc9, 0xd9,
	0x90, 0xd0, 0x84, 0xef, 0xe8, 0xe5, 0x3b, 0x8a, 0x64, 0x77, 0x9d, 0xc4, 0x51, 0xa2, 0x99, 0xad,
	0xb3, 0xb3, 0x57, 0x0b, 0xd3, 0xa1, 0xa6, 0xa6, 0x03, 0xfa, 0x12, 0x1a, 0x3b, 0x9e, 0x4f, 0x58,
	0x48, 0x30, 0x39, 0xe3, 0x51, 0x6b, 0xac, 0x5b, 0xaa, 0x67, 0x2f, 0x23, 0x3f, 0x74, 0xdc, 0x4c,
	0x48, 0x15, 0x47, 0x6b, 0x50, 0xf7, 0x58, 0x54, 0x17, 0xa7, 0xb9, 0x9e, 0x96, 0x09, 0xea, 0x85,
	0xc4, 0x42, 0xcc, 0x7e, 0x0d, 0x2d, 0xdd, 0x5c, 0x51, 0x11, 0xa3, 0x24, 0x70, 0xd5, 0x73, 0xc9,
	0xf5, 0x65, 0x37, 0xd4, 0xfe, 0xc9, 0x00, 0xe8, 0x0c, 0x24, 0x81, 0xc1, 0x90, 0x30, 0x33, 0xc2,
	0x38, 0xff, 0x46, 0x77, 0x41, 0x24, 0x17, 0xcf, 0xf8, 0x0a, 0x77, 0x7a, 0x6c, 0x12, 0xf2, 0xac,
	0x57, 0xab, 0x44, 0xf5, 0xf2, 0x2a, 0x61, 0xff, 0x5e, 0x81, 0x96, 0x8c, 0x1f, 0x8d, 0xc2, 0x80,
	0x92, 0xe2, 0x00, 0x6e, 0x5f, 0x08, 0xa0, 0x5c, 0xa3, 0x7b, 0x60, 0xfa, 0xa2, 0x02, 0xd2, 0x28,
	0xdd, 0x51, 0x0b, 0xc9, 0x8e, 0x17, 0xd3, 0x84, 0x17, 0x31, 0x0e, 0x6e, 0x2e, 0x8c, 0xfe, 0x0f,
	0x26, 0x47, 0x9a, 0xd1, 0xd3, 0xaa, 0x51, 0x1e, 0x94, 0x5c, 0x14, 0xed, 0xc2, 0x7c, 0x78, 0x7c,
	0xec, 0x7b, 0x01, 0xc9, 0xb2, 0x34, 0xbd, 0x0b, 0x4b, 0xaa, 0xfa, 0x37, 0x17, 0x64, 0xf0, 0x88,
	0x16, 0x43, 0xf8, 0x94, 0x90, 0x68, 0xcb, 0xf7, 0xce, 0x49, 0x7a, 0x2d, 0x34, 0x84, 0x9f, 0x4a,
	0x26, 0xce, 0xe5, 0x64, 0x32, 0xce, 0x8c, 0x4f, 0x46, 0x0c, 0xf3, 0x17, 0x1d, 0x40, 0x5f, 0x41,
	0x53, 0x75, 0x81, 0xe5, 0xd6, 0x48, 0x4d, 0xd6, 0x94, 0x74, 0x71, 0xfb, 0x08, 0xe6, 0x54, 0x36,
	0x0b, 0xcb, 0x21, 0x09, 0x5c, 0x7e, 0xc3, 0x44, 0xb4, 0xb2, 0xb5, 0x0e, 0x6e, 0x41, 0xed, 0x2f,
	0x01, 0xd7, 0xfe, 0xd5, 0x80, 0x96, 0x1e, 0xb2, 0xbf, 0x7d, 0xe3, 0xb1, 0x6f, 0x83, 0x99, 0x45,
	0xaa, 0xe0, 0xf6, 0xce, 0x43, 0xf5, 0xf0, 0xd5, 0x81, 0x2c, 0x78, 0x87, 0xaf, 0x0e, 0x58, 0xaf,
	0x17, 0x2e, 0x1c, 0x90, 0x37, 0xb2, 0x48, 0xea, 0x3a, 0x08, 0x6a, 0xc7, 0x8c, 0x24, 0x94, 0xf8,
	0xb7, 0xae, 0x35, 0x71, 0x55, 0xc6, 0x52, 0x6b, 0x9b, 0xf8, 0x13, 0xef, 0x75, 0xc9, 0xf4, 0xb6,
	0xa1, 0xda, 0x14, 0x9e, 0x90, 0x38, 0x1e, 0xe7, 0x09, 0x89, 0x63, 0x7b, 0x19, 0x40, 0x68, 0xd1,
	0x42, 0x3f, 0xec, 0x5d, 0x69, 0x55, 0x04, 0xa6, 0xd8, 0xd3, 0x91, 0xd9, 0x05, 0x41, 0xcd, 0x1b,
	0x10, 0x8f, 0x3b, 0x59, 0xc5, 0xfc, 0xdb, 0xfe, 0x31, 0xdf, 0x89, 0x46, 0x05, 0x76, 0x3e, 0xe1,
	0x86, 0x4c, 0x36, 0x1c, 0xde, 0x87, 0xe6, 0x4b, 0x4a, 0xe2, 0x43, 0xe2, 0xc4, 0xbd, 0x93, 0x62,
	0xd4, 0x17, 0x60, 0x3a, 0x71, 0xe2, 0x3e, 0x91, 0xb3, 0x60, 0xba, 0xb2, 0x7f, 0x33, 0x00, 0x98,
	0xee, 0x38, 0x10, 0xf8, 0x81, 0x53, 0x10, 0xd8, 0x77, 0x59, 0x17, 0x0b, 0x03, 0x96, 0xac, 0xbc,
	0xb6, 0xd5, 0x71, 0xba, 0x42, 0x2b, 0xd0, 0x50, 0x5a, 0x6d, 0x3a, 0x7b, 0xa8, 0x24, 0x74, 0x03,
	0x4c, 0x96, 0x4c, 0x5d, 0xde, 0x11, 0xa6, 0x45, 0x62, 0x33, 0x02, 0xaf, 0xb7, 0xd7, 0x61, 0xb6,
	0x1f, 0x47, 0xdd, 0x38, 0xf4, 0x09, 0xaf, 0x41, 0x75, 0x3c, 0xd3, 0x8f, 0x23, 0x1c, 0xfa, 0x7c,
	0x1a, 0xf7, 0xa8, 0x40, 0x6e, 0x71, 0x76, 0xc5, 0x58, 0x9d, 0xc5, 0xd9, 0xda, 0xfe, 0x5e, 0x43,
	0x64, 0xd2, 0xdb, 0xcb, 0x2a, 0x24, 0x77, 0x45, 0x89, 0xd3, 0x82, 0xd6, 0x70, 0x33, 0xa4, 0x84,
	0x8b, 0x3c, 0x1f, 0xdf, 0x1b, 0xd0, 0x7a, 0x14, 0x13, 0x27, 0x21, 0xfc, 0x44, 0x0c, 0xff, 0x25,
	0x30, 0xc5, 0xac, 0xdd, 0x71, 0x69, 0xfa, 0x94, 0xc9, 0x09, 0x8c, 0xcb, 0xb3, 0x59, 0x79, 0x0e,
	0xe4, 0x04, 0xc6, 0xcd, 0xe6, 0x78, 0x99, 0x0b, 0xf9, 0x60, 0xbf, 0x21, 0x07, 0x7b, 0x56, 0x15,
	0xd8, 0xf4, 0x59, 0x2d, 0x29, 0x50, 0xaa, 0x18, 0xba, 0xad, 0xf6, 0x56, 0xd1, 0x3c, 0xae, 0x8e,
	0xd4, 0x19, 0xa5, 0xaf, 0xda, 0x3e, 0x5c, 0xd1, 0x8e, 0x24, 0xba, 0x47, 0x56, 0x8e, 0x52, 0x1c,
	0xcb, 0x6a, 0x55, 0xf6, 0x29, 0x61, 0xaf, 0x8c, 0xbf, 0xbf, 0xcf, 0xa1, 0xd9, 0x8e, 0x23, 0x06,
	0xee, 0x96, 0xeb, 0x16, 0xdf, 0x5f, 0x36, 0xc6, 0x79, 0xf9, 0x18, 0x77, 0x69, 0xcd, 0xd8, 0xd4,
	0x4c, 0x4e, 0x5c, 0xbe, 0x72, 0x4f, 0x4a, 0xeb, 0xd7, 0xc7, 0x7b, 0x92, 0x97, 0xaf, 0x09, 0x3c,
	0xb9, 0x03, 0x0d, 0xa6, 0xf3, 0xf8, 0xad, 0x97, 0x4c, 0xe8, 0x87, 0x7d, 0x57, 0x51, 0x99, 0x78,
	0x9f, 0x03, 0x68, 0xf0, 0x70, 0x95, 0x9e, 0xf7, 0x06, 0x98, 0x2c, 0xfb, 0x44, 0x7a, 0xa6, 0xe3,
	0x10, 0x23, 0xf0, 0xf4, 0x4c, 0x9d, 0xa8, 0x6a, 0x4e, 0x64, 0xf6, 0x26, 0x76, 0x62, 0x19, 0xa0,
	0x1d, 0xf3, 0xee, 0x56, 0x5c, 0xab, 0x7f, 0x31, 0x94, 0xcb, 0x27, 0x37, 0x35, 0xf2, 0x08, 0xdc,
	0x94, 0x8d, 0x34, 0x28, 0x4c, 0xa9, 0xff, 0x40, 0x53, 0xb0, 0x07, 0x4e, 0xe0, 0xf4, 0x49, 0x9c,
	0xfa, 0x3b, 0xc7, 0x89, 0xfb, 0x82, 0x86, 0xee, 0xb0, 0xbe, 0x9f, 0xa6, 0x7e, 0x6d, 0x6c, 0xea,
	0xcf, 0x0c, 0x29, 0xcf, 0x7c, 0xf6, 0xa6, 0xf2, 0xe8, 0xe3, 0xb7, 0x4c, 0xa3, 0xce, 0x0b, 0x90,
	0x5c, 0xda, 0x3f, 0xc0, 0x5c, 0x5b, 0x36, 0xec, 0xe2, 0xa6, 0xa0, 0xf7, 0xfe, 0xca, 0x87, 0x3d,
	0x3a, 0x2f, 0xe9, 0x07, 0xf7, 0xd8, 0xee, 0xd1, 0xc7, 0xb4, 0x83, 0x4d, 0x68, 0x76, 0x82, 0x73,
	0x2f, 0x21, 0xe2, 0xb8, 0x67, 0x05, 0x58, 0x23, 0xa8, 0x0d, 0x3d, 0x97, 0xca, 0x86, 0xc0, 0xbe,
	0x6d, 0x0f, 0x5a, 0xaa, 0x1a, 0x8d, 0x34, 0x34, 0x8d, 0xc9, 0xd0, 0x9c, 0xac, 0x56, 0x6c, 0xc2,
	0x95, 0x36, 0x49, 0x72, 0x70, 0x0a, 0x7d, 0x4c, 0x0f, 0x5c, 0xc9, 0x6f, 0xd0, 0x00, 0xe6, 0x75,
	0x35, 0x51, 0xd1, 0xfa, 0x13, 0x56, 0xb4, 0xfe, 0x87, 0x55, 0xb4, 0xf5, 0x3f, 0x01, 0xcc, 0x17,
	0x8e, 0x7f, 0xfa, 0x88, 0x71, 0xd0, 0x03, 0x68, 0x88, 0xdf, 0x86, 0x3c, 0x9a, 0x90, 0x18, 0x69,
	0x9b, 0x64, 0xbf, 0x4b, 0x59, 0x45, 0x64, 0x1a, 0xd9, 0x53, 0x68, 0x07, 0x5a, 0xd9, 0x6f, 0x35,
	0xc2, 0x82, 0x36, 0x3c, 0xa8, 0xbf, 0x0b, 0x59, 0x25, 0x1c, 0x6e, 0x67, 0x13, 0xea, 0x7c, 0xcc,
	0x45, 0xd7, 0x54, 0x21, 0xf9, 0x83, 0x8e, 0x55, 0x40, 0xe5, 0x6a, 0xf7, 0x60, 0x5a, 0xbc, 0xcd,
	0x75, 0xc7, 0xb3, 0x67, 0xbf, 0x55, 0x44, 0xe6, 0x9a, 0xcf, 0xa1, 0xa5, 0xbf, 0xb4, 0xd1, 0x4d,
	0x55, 0x74, 0xe4, 0xf9, 0x6e, 0x2d, 0x8f, 0x63, 0x73, 0x93, 0x1d, 0x98, 0xef, 0x0c, 0xf6, 0x09,
	0xa5, 0x4e, 0x9f, 0x3c, 0x1b, 0x1e, 0xf9, 0x1e, 0x3d, 0x41, 0xa5, 0x93, 0xbe, 0x75, 0xbd, 0x80,
	0x23, 0x7e, 0xe4, 0xb0, 0xa7, 0xd0, 0x13, 0x68, 0xb0, 0x2f, 0x69, 0x45, 0x93, 0xd5, 0xde, 0xf8,
	0x96, 0x55, 0xc4, 0x12, 0xcf, 0x47, 0x7b, 0x6a, 0xd5, 0xf8, 0x9f, 0x81, 0xb6, 0xc0, 0xdc, 0x72,
	0x5d, 0x31, 0x7c, 0xa0, 0x82, 0xd1, 0x4e, 0x4c, 0xde, 0x56, 0x09, 0x87, 0x9f, 0x6c, 0x0b, 0xcc,
	0x6d, 0xe2, 0x97, 0x9b, 0x10, 0x05, 0xda, 0x2a, 0xe1, 0xa4, 0x26, 0x9a, 0x6d, 0x92, 0xec, 0xe4,
	0xe3, 0xe3, 0xc2, 0xa8, 0x30, 0x9b, 0x86, 0xad, 0x42, 0x7a, 0x8a, 0xef, 0x15, 0x51, 0x37, 0x58,
	0x86, 0x3e, 0x7c, 0xf7, 0x94, 0xbc, 0xd3, 0x81, 0xd1, 0xe6, 0x4c, 0xab, 0x8c, 0xc5, 0x4d, 0xed,
	0x42, 0x43, 0x99, 0x21, 0x90, 0x06, 0xa2, 0x3e, 0x2f, 0x59, 0x37, 0x4a, 0x79, 0xdc, 0xd2, 0x23,
	0x30, 0x9f, 0x84, 0x5e, 0x20, 0xec, 0x5c, 0xd7, 0x53, 0x54, 0x19, 0x1b, 0xac, 0x32, 0x16, 0x37,
	0xd2, 0x86, 0x26, 0x26, 0x83, 0xf0, 0x9c, 0xa4, 0x8c, 0x42, 0x43, 0x29, 0xc8, 0x65, 0x2c, 0x6e,
	0xe8, 0x01, 0xcc, 0xb0, 0x16, 0xdb, 0x8e, 0x23, 0xf4, 0xaf, 0x8b, 0xe7, 0x4f, 0xdb, 0xb5, 0x55,
	0xcc, 0xe0, 0xea, 0x5f, 0x83, 0x99, 0xf9, 0xa1, 0x1b, 0x50, 0xfa, 0xb0, 0x55, 0xcc, 0xe0, 0x06,
	0x1e, 0xc2, 0x9c, 0x2c, 0x65, 0xa3, 0x41, 0xce, 0xdb, 0xa8, 0x7e, 0x53, 0xd4, 0x6e, 0xc4, 0x11,
	0x6d, 0x88, 0x50, 0x09, 0x4c, 0x2f, 0x88, 0xe6, 0xad, 0x63, 0xac, 0x91, 0x03, 0xf8, 0x47, 0x5e,
	0xf5, 0x3b, 0x41, 0x12, 0x16, 0x04, 0x48, 0xeb, 0x26, 0x7a, 0x22, 0xe9, 0x1d, 0xc3, 0x9e, 0x42,
	0x4f, 0xf3, 0x83, 0xf1, 0x52, 0xab, 0xdd, 0x8a, 0x0b, 0x45, 0xdf, 0x5a, 0x2a, 0x67, 0x32, 0x63,
	0x47, 0xd3, 0xfc, 0xaf, 0x85, 0xbb, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x98, 0x70, 0x97,
	0x96, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TalkCloudClient is the client API for TalkCloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TalkCloudClient interface {
	// app注册普通用户
	AppRegister(ctx context.Context, in *AppRegReq, opts ...grpc.CallOption) (*AppRegRsp, error)
	// 注册对讲机 /***暂时用不到***/
	DeviceRegister(ctx context.Context, in *DeviceRegReq, opts ...grpc.CallOption) (*DeviceRegRsp, error)
	// App用户登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// App用户退出
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRsp, error)
	// 设置锁定组（默认所在组）
	SetLockGroupId(ctx context.Context, in *SetLockGroupIdReq, opts ...grpc.CallOption) (*SetLockGroupIdResp, error)
	// web端推送文件类型im数据
	ImMessagePublish(ctx context.Context, in *ImMsgReqData, opts ...grpc.CallOption) (*ImMsgRespData, error)
	// IM离线数据、心跳、Im消息，根据请求消息的类型，返回对应类型的数据
	DataPublish(ctx context.Context, opts ...grpc.CallOption) (TalkCloud_DataPublishClient, error)
	// App用户增加好友
	AddFriend(ctx context.Context, in *FriendNewReq, opts ...grpc.CallOption) (*FriendNewRsp, error)
	// App用户删除好友
	DelFriend(ctx context.Context, in *FriendDelReq, opts ...grpc.CallOption) (*FriendDelRsp, error)
	// 获取好友列表
	GetFriendList(ctx context.Context, in *FriendsReq, opts ...grpc.CallOption) (*FriendsRsp, error)
	// 通过关键字直接查找数据库里的用户
	SearchUserByKey(ctx context.Context, in *UserSearchReq, opts ...grpc.CallOption) (*UserSearchRsp, error)
	// 创建组
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	// 某个App用户添加进组
	JoinGroup(ctx context.Context, in *GrpUserAddReq, opts ...grpc.CallOption) (*GrpUserAddRsp, error)
	// 移除某个组成员
	RemoveGrpUser(ctx context.Context, in *GrpUserDelReq, opts ...grpc.CallOption) (*GrpUserDelRsp, error)
	// 退出某个组  /***暂时没有用到***/
	ExitGrp(ctx context.Context, in *UserExitReq, opts ...grpc.CallOption) (*UserExitRsp, error)
	// 移除某个组 /***暂时也没有用到***/
	RemoveGrp(ctx context.Context, in *GroupDelReq, opts ...grpc.CallOption) (*GroupDelRsp, error)
	// 获取群组列表
	GetGroupList(ctx context.Context, in *GrpListReq, opts ...grpc.CallOption) (*GroupListRsp, error)
	// 通过关键字，获取群组
	SearchGroup(ctx context.Context, in *GrpSearchReq, opts ...grpc.CallOption) (*GroupListRsp, error)
	// 邀请其他人进群
	InviteUserIntoGroup(ctx context.Context, in *InviteUserReq, opts ...grpc.CallOption) (*InviteUserResp, error)
	// App单独获取某个群组信息以及群成员等信息
	GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoResp, error)
}

type talkCloudClient struct {
	cc *grpc.ClientConn
}

func NewTalkCloudClient(cc *grpc.ClientConn) TalkCloudClient {
	return &talkCloudClient{cc}
}

func (c *talkCloudClient) AppRegister(ctx context.Context, in *AppRegReq, opts ...grpc.CallOption) (*AppRegRsp, error) {
	out := new(AppRegRsp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/AppRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) DeviceRegister(ctx context.Context, in *DeviceRegReq, opts ...grpc.CallOption) (*DeviceRegRsp, error) {
	out := new(DeviceRegRsp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/DeviceRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRsp, error) {
	out := new(LogoutRsp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) SetLockGroupId(ctx context.Context, in *SetLockGroupIdReq, opts ...grpc.CallOption) (*SetLockGroupIdResp, error) {
	out := new(SetLockGroupIdResp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/SetLockGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) ImMessagePublish(ctx context.Context, in *ImMsgReqData, opts ...grpc.CallOption) (*ImMsgRespData, error) {
	out := new(ImMsgRespData)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/ImMessagePublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) DataPublish(ctx context.Context, opts ...grpc.CallOption) (TalkCloud_DataPublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TalkCloud_serviceDesc.Streams[0], "/talk_cloud.TalkCloud/DataPublish", opts...)
	if err != nil {
		return nil, err
	}
	x := &talkCloudDataPublishClient{stream}
	return x, nil
}

type TalkCloud_DataPublishClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type talkCloudDataPublishClient struct {
	grpc.ClientStream
}

func (x *talkCloudDataPublishClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *talkCloudDataPublishClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *talkCloudClient) AddFriend(ctx context.Context, in *FriendNewReq, opts ...grpc.CallOption) (*FriendNewRsp, error) {
	out := new(FriendNewRsp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/AddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) DelFriend(ctx context.Context, in *FriendDelReq, opts ...grpc.CallOption) (*FriendDelRsp, error) {
	out := new(FriendDelRsp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/DelFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) GetFriendList(ctx context.Context, in *FriendsReq, opts ...grpc.CallOption) (*FriendsRsp, error) {
	out := new(FriendsRsp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/GetFriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) SearchUserByKey(ctx context.Context, in *UserSearchReq, opts ...grpc.CallOption) (*UserSearchRsp, error) {
	out := new(UserSearchRsp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/SearchUserByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) JoinGroup(ctx context.Context, in *GrpUserAddReq, opts ...grpc.CallOption) (*GrpUserAddRsp, error) {
	out := new(GrpUserAddRsp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/JoinGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) RemoveGrpUser(ctx context.Context, in *GrpUserDelReq, opts ...grpc.CallOption) (*GrpUserDelRsp, error) {
	out := new(GrpUserDelRsp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/RemoveGrpUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) ExitGrp(ctx context.Context, in *UserExitReq, opts ...grpc.CallOption) (*UserExitRsp, error) {
	out := new(UserExitRsp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/ExitGrp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) RemoveGrp(ctx context.Context, in *GroupDelReq, opts ...grpc.CallOption) (*GroupDelRsp, error) {
	out := new(GroupDelRsp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/RemoveGrp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) GetGroupList(ctx context.Context, in *GrpListReq, opts ...grpc.CallOption) (*GroupListRsp, error) {
	out := new(GroupListRsp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/GetGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) SearchGroup(ctx context.Context, in *GrpSearchReq, opts ...grpc.CallOption) (*GroupListRsp, error) {
	out := new(GroupListRsp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/SearchGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) InviteUserIntoGroup(ctx context.Context, in *InviteUserReq, opts ...grpc.CallOption) (*InviteUserResp, error) {
	out := new(InviteUserResp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/InviteUserIntoGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkCloudClient) GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoResp, error) {
	out := new(GetGroupInfoResp)
	err := c.cc.Invoke(ctx, "/talk_cloud.TalkCloud/GetGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TalkCloudServer is the server API for TalkCloud service.
type TalkCloudServer interface {
	// app注册普通用户
	AppRegister(context.Context, *AppRegReq) (*AppRegRsp, error)
	// 注册对讲机 /***暂时用不到***/
	DeviceRegister(context.Context, *DeviceRegReq) (*DeviceRegRsp, error)
	// App用户登录
	Login(context.Context, *LoginReq) (*LoginRsp, error)
	// App用户退出
	Logout(context.Context, *LogoutReq) (*LogoutRsp, error)
	// 设置锁定组（默认所在组）
	SetLockGroupId(context.Context, *SetLockGroupIdReq) (*SetLockGroupIdResp, error)
	// web端推送文件类型im数据
	ImMessagePublish(context.Context, *ImMsgReqData) (*ImMsgRespData, error)
	// IM离线数据、心跳、Im消息，根据请求消息的类型，返回对应类型的数据
	DataPublish(TalkCloud_DataPublishServer) error
	// App用户增加好友
	AddFriend(context.Context, *FriendNewReq) (*FriendNewRsp, error)
	// App用户删除好友
	DelFriend(context.Context, *FriendDelReq) (*FriendDelRsp, error)
	// 获取好友列表
	GetFriendList(context.Context, *FriendsReq) (*FriendsRsp, error)
	// 通过关键字直接查找数据库里的用户
	SearchUserByKey(context.Context, *UserSearchReq) (*UserSearchRsp, error)
	// 创建组
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	// 某个App用户添加进组
	JoinGroup(context.Context, *GrpUserAddReq) (*GrpUserAddRsp, error)
	// 移除某个组成员
	RemoveGrpUser(context.Context, *GrpUserDelReq) (*GrpUserDelRsp, error)
	// 退出某个组  /***暂时没有用到***/
	ExitGrp(context.Context, *UserExitReq) (*UserExitRsp, error)
	// 移除某个组 /***暂时也没有用到***/
	RemoveGrp(context.Context, *GroupDelReq) (*GroupDelRsp, error)
	// 获取群组列表
	GetGroupList(context.Context, *GrpListReq) (*GroupListRsp, error)
	// 通过关键字，获取群组
	SearchGroup(context.Context, *GrpSearchReq) (*GroupListRsp, error)
	// 邀请其他人进群
	InviteUserIntoGroup(context.Context, *InviteUserReq) (*InviteUserResp, error)
	// App单独获取某个群组信息以及群成员等信息
	GetGroupInfo(context.Context, *GetGroupInfoReq) (*GetGroupInfoResp, error)
}

// UnimplementedTalkCloudServer can be embedded to have forward compatible implementations.
type UnimplementedTalkCloudServer struct {
}

func (*UnimplementedTalkCloudServer) AppRegister(ctx context.Context, req *AppRegReq) (*AppRegRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppRegister not implemented")
}
func (*UnimplementedTalkCloudServer) DeviceRegister(ctx context.Context, req *DeviceRegReq) (*DeviceRegRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceRegister not implemented")
}
func (*UnimplementedTalkCloudServer) Login(ctx context.Context, req *LoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedTalkCloudServer) Logout(ctx context.Context, req *LogoutReq) (*LogoutRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedTalkCloudServer) SetLockGroupId(ctx context.Context, req *SetLockGroupIdReq) (*SetLockGroupIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLockGroupId not implemented")
}
func (*UnimplementedTalkCloudServer) ImMessagePublish(ctx context.Context, req *ImMsgReqData) (*ImMsgRespData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImMessagePublish not implemented")
}
func (*UnimplementedTalkCloudServer) DataPublish(srv TalkCloud_DataPublishServer) error {
	return status.Errorf(codes.Unimplemented, "method DataPublish not implemented")
}
func (*UnimplementedTalkCloudServer) AddFriend(ctx context.Context, req *FriendNewReq) (*FriendNewRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (*UnimplementedTalkCloudServer) DelFriend(ctx context.Context, req *FriendDelReq) (*FriendDelRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFriend not implemented")
}
func (*UnimplementedTalkCloudServer) GetFriendList(ctx context.Context, req *FriendsReq) (*FriendsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (*UnimplementedTalkCloudServer) SearchUserByKey(ctx context.Context, req *UserSearchReq) (*UserSearchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserByKey not implemented")
}
func (*UnimplementedTalkCloudServer) CreateGroup(ctx context.Context, req *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedTalkCloudServer) JoinGroup(ctx context.Context, req *GrpUserAddReq) (*GrpUserAddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (*UnimplementedTalkCloudServer) RemoveGrpUser(ctx context.Context, req *GrpUserDelReq) (*GrpUserDelRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGrpUser not implemented")
}
func (*UnimplementedTalkCloudServer) ExitGrp(ctx context.Context, req *UserExitReq) (*UserExitRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitGrp not implemented")
}
func (*UnimplementedTalkCloudServer) RemoveGrp(ctx context.Context, req *GroupDelReq) (*GroupDelRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGrp not implemented")
}
func (*UnimplementedTalkCloudServer) GetGroupList(ctx context.Context, req *GrpListReq) (*GroupListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupList not implemented")
}
func (*UnimplementedTalkCloudServer) SearchGroup(ctx context.Context, req *GrpSearchReq) (*GroupListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroup not implemented")
}
func (*UnimplementedTalkCloudServer) InviteUserIntoGroup(ctx context.Context, req *InviteUserReq) (*InviteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUserIntoGroup not implemented")
}
func (*UnimplementedTalkCloudServer) GetGroupInfo(ctx context.Context, req *GetGroupInfoReq) (*GetGroupInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInfo not implemented")
}

func RegisterTalkCloudServer(s *grpc.Server, srv TalkCloudServer) {
	s.RegisterService(&_TalkCloud_serviceDesc, srv)
}

func _TalkCloud_AppRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRegReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).AppRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/AppRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).AppRegister(ctx, req.(*AppRegReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_DeviceRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRegReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).DeviceRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/DeviceRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).DeviceRegister(ctx, req.(*DeviceRegReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_SetLockGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLockGroupIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).SetLockGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/SetLockGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).SetLockGroupId(ctx, req.(*SetLockGroupIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_ImMessagePublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImMsgReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).ImMessagePublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/ImMessagePublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).ImMessagePublish(ctx, req.(*ImMsgReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_DataPublish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TalkCloudServer).DataPublish(&talkCloudDataPublishServer{stream})
}

type TalkCloud_DataPublishServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type talkCloudDataPublishServer struct {
	grpc.ServerStream
}

func (x *talkCloudDataPublishServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *talkCloudDataPublishServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TalkCloud_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).AddFriend(ctx, req.(*FriendNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_DelFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).DelFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/DelFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).DelFriend(ctx, req.(*FriendDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/GetFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).GetFriendList(ctx, req.(*FriendsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_SearchUserByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).SearchUserByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/SearchUserByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).SearchUserByKey(ctx, req.(*UserSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpUserAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).JoinGroup(ctx, req.(*GrpUserAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_RemoveGrpUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpUserDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).RemoveGrpUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/RemoveGrpUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).RemoveGrpUser(ctx, req.(*GrpUserDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_ExitGrp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserExitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).ExitGrp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/ExitGrp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).ExitGrp(ctx, req.(*UserExitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_RemoveGrp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).RemoveGrp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/RemoveGrp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).RemoveGrp(ctx, req.(*GroupDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_GetGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).GetGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/GetGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).GetGroupList(ctx, req.(*GrpListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_SearchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).SearchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/SearchGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).SearchGroup(ctx, req.(*GrpSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_InviteUserIntoGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).InviteUserIntoGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/InviteUserIntoGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).InviteUserIntoGroup(ctx, req.(*InviteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkCloud_GetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkCloudServer).GetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.TalkCloud/GetGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkCloudServer).GetGroupInfo(ctx, req.(*GetGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TalkCloud_serviceDesc = grpc.ServiceDesc{
	ServiceName: "talk_cloud.TalkCloud",
	HandlerType: (*TalkCloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppRegister",
			Handler:    _TalkCloud_AppRegister_Handler,
		},
		{
			MethodName: "DeviceRegister",
			Handler:    _TalkCloud_DeviceRegister_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _TalkCloud_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _TalkCloud_Logout_Handler,
		},
		{
			MethodName: "SetLockGroupId",
			Handler:    _TalkCloud_SetLockGroupId_Handler,
		},
		{
			MethodName: "ImMessagePublish",
			Handler:    _TalkCloud_ImMessagePublish_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _TalkCloud_AddFriend_Handler,
		},
		{
			MethodName: "DelFriend",
			Handler:    _TalkCloud_DelFriend_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _TalkCloud_GetFriendList_Handler,
		},
		{
			MethodName: "SearchUserByKey",
			Handler:    _TalkCloud_SearchUserByKey_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _TalkCloud_CreateGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _TalkCloud_JoinGroup_Handler,
		},
		{
			MethodName: "RemoveGrpUser",
			Handler:    _TalkCloud_RemoveGrpUser_Handler,
		},
		{
			MethodName: "ExitGrp",
			Handler:    _TalkCloud_ExitGrp_Handler,
		},
		{
			MethodName: "RemoveGrp",
			Handler:    _TalkCloud_RemoveGrp_Handler,
		},
		{
			MethodName: "GetGroupList",
			Handler:    _TalkCloud_GetGroupList_Handler,
		},
		{
			MethodName: "SearchGroup",
			Handler:    _TalkCloud_SearchGroup_Handler,
		},
		{
			MethodName: "InviteUserIntoGroup",
			Handler:    _TalkCloud_InviteUserIntoGroup_Handler,
		},
		{
			MethodName: "GetGroupInfo",
			Handler:    _TalkCloud_GetGroupInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DataPublish",
			Handler:       _TalkCloud_DataPublish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "talk_cloud_app.proto",
}
